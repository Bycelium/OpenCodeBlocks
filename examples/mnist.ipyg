{
    "id": 2205665405400,
    "blocks": [
        {
            "id": 2443477874008,
            "title": "Model Train",
            "block_type": "code",
            "source": "model.fit(x=x_train,y=y_train, epochs=4)\r\n",
            "stdout": "<keras.callbacks.History at 0x2e5137ee3d0>",
            "image": "",
            "splitter_pos": [
                85,
                259
            ],
            "position": [
                1062.374999999999,
                -321.5820312499999
            ],
            "width": 1064,
            "height": 399,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10,
                    "padding": 4.0
                }
            },
            "sockets": [
                {
                    "id": 2443477875016,
                    "type": "input",
                    "position": [
                        0.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#e02c2c",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                },
                {
                    "id": 2443477875160,
                    "type": "output",
                    "position": [
                        1064.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#35bc31",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                }
            ]
        },
        {
            "id": 2443477924600,
            "title": "Keras Model Predict",
            "block_type": "code",
            "source": "rd_index = np.random.randint(len(x_test))\r\nprediction = np.argmax(model.predict(x_test[rd_index].reshape(1, 28, 28, 1)))\r\nplt.imshow(x_test[rd_index], cmap='gray')\r\nplt.title(\"Predicted: \" + str(prediction))",
            "stdout": "Text(0.5, 1.0, 'Predicted: 3')",
            "image": "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\n",
            "splitter_pos": [
                0,
                278
            ],
            "position": [
                2244.066406249998,
                -594.3554687499998
            ],
            "width": 301,
            "height": 333,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10,
                    "padding": 4.0
                }
            },
            "sockets": [
                {
                    "id": 2443477925608,
                    "type": "input",
                    "position": [
                        0.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                }
            ]
        },
        {
            "id": 2443477997032,
            "title": "Keras Model eval",
            "block_type": "code",
            "source": "metrics = model.evaluate(x_test, y_test)\r\nprint(f\"mean_loss:{metrics[0]:.2f}, mean_acc:{metrics[1]:.2f}\")\r\n",
            "stdout": "mean_loss:0.05184061825275421, mean_acc:0.9848999977111816\n",
            "image": "",
            "splitter_pos": [
                79,
                79
            ],
            "position": [
                2156.17578125,
                -146.1249999999996
            ],
            "width": 914,
            "height": 213,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10,
                    "padding": 4.0
                }
            },
            "sockets": [
                {
                    "id": 2443477997896,
                    "type": "input",
                    "position": [
                        0.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                }
            ]
        },
        {
            "id": 2443478874872,
            "title": "Load MNIST Dataset",
            "block_type": "code",
            "source": "from tensorflow.keras.datasets import mnist\r\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\r\n",
            "stdout": "",
            "image": "",
            "splitter_pos": [
                85,
                0
            ],
            "position": [
                -877.3242187500001,
                -354.52734375000006
            ],
            "width": 834,
            "height": 112,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10,
                    "padding": 4.0
                }
            },
            "sockets": [
                {
                    "id": 2443478910728,
                    "type": "output",
                    "position": [
                        834.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                }
            ]
        },
        {
            "id": 2443478982728,
            "title": "Normalize Image Dataset",
            "block_type": "code",
            "source": "x_train = x_train.astype('float32') / 255.0\r\nx_test = x_test.astype('float32') / 255.0\r\n\r\nx_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\r\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\r\n\r\nprint('train:', x_train.shape, '|test:', x_test.shape)\r\n",
            "stdout": "train: (60000, 28, 28, 1) |test: (10000, 28, 28, 1)\n",
            "image": "",
            "splitter_pos": [
                206,
                85
            ],
            "position": [
                44.48828125000068,
                -370.21484374999983
            ],
            "width": 855,
            "height": 346,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10,
                    "padding": 4.0
                }
            },
            "sockets": [
                {
                    "id": 2443478983592,
                    "type": "input",
                    "position": [
                        0.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                },
                {
                    "id": 2443478983880,
                    "type": "output",
                    "position": [
                        855.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                }
            ]
        },
        {
            "id": 2443479017656,
            "title": "Build Keras CNN",
            "block_type": "code",
            "source": "import tensorflow as tf\r\nfrom tensorflow.keras.layers import (Dense, Flatten,\r\nConv2D, MaxPooling2D, Dropout)\r\nfrom tensorflow.keras.models import Sequential\r\n\r\nmodel = Sequential()\r\nmodel.add(Conv2D(28, kernel_size=(3,3), input_shape=x_train.shape[1:]))\r\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\r\nmodel.add(Flatten())\r\nmodel.add(Dense(128, activation=tf.nn.relu))\r\nmodel.add(Dropout(0.2))\r\nmodel.add(Dense(10,activation=tf.nn.softmax))\r\n\r\nmodel.compile(optimizer='adam', \r\n              loss='sparse_categorical_crossentropy', \r\n              metrics=['accuracy'])\r\n",
            "stdout": "",
            "image": "",
            "splitter_pos": [
                418,
                0
            ],
            "position": [
                -81.56249999999977,
                22.67968750000003
            ],
            "width": 1002,
            "height": 473,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10,
                    "padding": 4.0
                }
            },
            "sockets": [
                {
                    "id": 2443479018808,
                    "type": "output",
                    "position": [
                        1002.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                }
            ]
        },
        {
            "id": 2828158533848,
            "title": "Plot Image Dataset Example",
            "block_type": "code",
            "source": "import matplotlib.pyplot as plt\r\nimport numpy as np\r\n\r\n# Display an example from the dataset\r\nrd_index = np.random.randint(len(x_train))\r\nplt.imshow(x_train[rd_index], cmap='gray')\r\nplt.title('Class '+ str(y_train[rd_index]))\r\n",
            "stdout": "Text(0.5, 1.0, 'Class 9')",
            "image": "iVBORw0KGgoAAAANSUhEUgAAAPsAAAEICAYAAACZA4KlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPoElEQVR4nO3dfaxUdX7H8fdHqjGwrJWlAnWtgkUba7LSoOluTUNj3Qg2RdSYZTeGqvHaxIf6VGtoo6RGJbq63T+6q2w0i11162axPmTtqtfNYhPdFYwVFFddHgIEQcUHbGTR67d/zMFcYObMZebMA/f7eSU3M3O+85vzvQOfe87MOTM/RQRmNvod1OsGzKw7HHazJBx2syQcdrMkHHazJBx2syQc9kQkLZL0o173Yb3hsI8ykr4paYWkjyRtkfSEpFN71MvXJP1a0g5JL/eqD6tx2EcRSVcD/wbcAkwC/gj4HjC3B71MAB4Dbgd+H7gNeEzS4d3uxWoc9lFC0mHAvwKXRsSyiPi/iPgkIh6LiH9sMOYnkt6S9IGk5ZL+dFhtjqRXi63yZknXFssnSnpc0vuStkt6VlK9/0dfA96KiJ9ExFBE/Ah4Gzi7+t/eRsJhHz2+ChwKPLwfY54ApgNHAC8C9w+r3QNcEhHjgROBZ4rl1wCbgD+gtvewEGh0zrXq3D5xP/qzCjnso8eXgHci4tORDoiIeyNiR0T8DlgEfKXYQwD4BDhB0hcj4r2IeHHY8inA0cWew7NR/wMWzwF/KGm+pIMlLQCOBca2+PtZmxz20eNdYKKk3xvJnSWNkbRY0m8lfQisL0oTi8tzgDnABkm/lPTVYvntwJvAk5LWSrq+3uNHxLvU3iu4GtgKnAE8TW2vwHrAYR89ngN+B5w1wvt/k1oY/xo4DDimWC6AiHghIuZS28X/L+ChYvmOiLgmIqYBfwtcLem0eiuIiF9GxMkRMQE4H/gT4Nf7/ZtZJRz2USIiPgBuAP5d0lmSxha7z7Ml3VZnyHhqfxzepbZrfcvugqRDJH1L0mER8QnwIfBZUfsbSX8sScAHwNDu2t4kzSh6+CLwbWBjRPy8ut/a9ofDPopExB3Udpv/hdo73xuBy6htmfd2H7AB2Ay8Cjy/V/18YH2xi//3wLeK5dOp7Y5/RG1v4nsR8YsGLV0HvFP0MQWY18rvZdWQv7zCLAdv2c2ScNjNknDYzZJw2M2SGNEJGFWR5HcDzTosIvY+TRloc8su6QxJv5H0ZqMzqcysP7R86E3SGOB14HRqp0C+AMyPiFdLxnjLbtZhndiynwK8GRFrI2IX8GN68LlpMxuZdsJ+JLUzo3bbVCzbg6SB4ptTVrSxLjNrU8ffoIuIJcAS8G68WS+1s2XfDBw17PaXi2Vm1ofaCfsLwHRJUyUdAnwDeLSatsysai3vxkfEp5IuA34OjAHujYhXKuvMzCrV1U+9+TW7Wed15KQaMztwOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSTjsZkm0PD87gKT1wA5gCPg0ImZW0ZSZVa+tsBf+KiLeqeBxzKyDvBtvlkS7YQ/gSUkrJQ3Uu4OkAUkrJK1oc11m1gZFROuDpSMjYrOkI4CngMsjYnnJ/VtfmZmNSESo3vK2tuwRsbm43AY8DJzSzuOZWee0HHZJ4ySN330d+DqwuqrGzKxa7bwbPwl4WNLux3kgIv67kq5sD7Nnzy6tX3jhhQ1r5557btXt7OG6664rrd9+++0dXb+NXMthj4i1wFcq7MXMOsiH3syScNjNknDYzZJw2M2ScNjNkmjrDLr9XpnPoKvr9NNPL60vW7astD5u3LiGtaGhodKxO3fuLK2PHTu2tL5u3brS+sknn9yw9t5775WOtdZ05Aw6MztwOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJVPGFk9bExIkTS+s333xzab3sODrAypUrG9Yuv/zy0rHPP/98y48NMGPGjNL6EUcc0bDm4+zd5S27WRIOu1kSDrtZEg67WRIOu1kSDrtZEg67WRI+zt4Fd955Z2l95szyyW9fe+210vqcOXMa1t5+++3SsZaHt+xmSTjsZkk47GZJOOxmSTjsZkk47GZJOOxmSfg4exeMHz++rfGrVq0qrbdzLH3WrFml9WnTppXW16xZU1o/9NBDG9bOPPPM0rHPPPNMaf3jjz8urduemm7ZJd0raZuk1cOWTZD0lKQ3isvDO9ummbVrJLvxPwTO2GvZ9cBgREwHBovbZtbHmoY9IpYD2/daPBdYWlxfCpxVbVtmVrVWX7NPiogtxfW3gEmN7ihpABhocT1mVpG236CLiCibsDEilgBLwBM7mvVSq4fetkqaAlBcbquuJTPrhFbD/iiwoLi+AHikmnbMrFOa7sZLehCYBUyUtAm4EVgMPCTpImADcF4nm8zugQce6NhjP/JI+d9pqe5U359bvHhxaX3evHkNazfccEPp2IULF7a1bttT07BHxPwGpdMq7sXMOsiny5ol4bCbJeGwmyXhsJsl4bCbJeGPuHbBunXr2ho/efLkijrZ1znnnFNa37RpU2m92ddcN/sIbJkNGza0PNb25S27WRIOu1kSDrtZEg67WRIOu1kSDrtZEg67WRI+zt4Fg4ODpfUrr7yytH7VVVeV1pcuXdqwtnPnztKxTz/9dGm92UdcFy1aVFqfPn16ab3M+++/3/JY25e37GZJOOxmSTjsZkk47GZJOOxmSTjsZkk47GZJ+Dh7Fzz33HOl9e3b955Kb0/HHXdcab3sK5VvvfXW0rFTp04trZ999tml9Wuvvba03o5du3Z17LEz8pbdLAmH3SwJh90sCYfdLAmH3SwJh90sCYfdLAlFRPdWJnVvZQeQu+66q7Q+MDDQ8mMPDQ2V1g86qPzvfbPPs3fSTTfdVFq/8cYbu9TJgSUi6v6jNd2yS7pX0jZJq4ctWyRps6SXip85VTZrZtUbyW78D4Ez6iz/TkScVPz8rNq2zKxqTcMeEcuB8vM5zazvtfMG3WWSXi528w9vdCdJA5JWSFrRxrrMrE2thv37wLHAScAW4I5Gd4yIJRExMyJmtrguM6tAS2GPiK0RMRQRnwE/AE6pti0zq1pLYZc0ZdjNecDqRvc1s/7Q9PPskh4EZgETJW0CbgRmSToJCGA9cEnnWhz9rrjiitJ6s3nKFy5c2LA2duzY0rHNjqM3+0z5LbfcUlq/4IILGtaOPvro0rFWraZhj4j5dRbf04FezKyDfLqsWRIOu1kSDrtZEg67WRIOu1kS/ojrKDd79uzS+pgxY0rrjz/+eFvrv/vuuxvWLr744tKxy5cvL63PmjWrlZZGvZY/4mpmo4PDbpaEw26WhMNuloTDbpaEw26WhMNuloSnbB7lnnjiiZ6u//XXX2957IwZM0rr06ZNK62vXbu25XWPRt6ymyXhsJsl4bCbJeGwmyXhsJsl4bCbJeGwmyXh4+zWUYODgy2PHT9+fGn9+OOPL637OPuevGU3S8JhN0vCYTdLwmE3S8JhN0vCYTdLwmE3S2IkUzYfBdwHTKI2RfOSiPiupAnAfwLHUJu2+byIeK9zrdqBaP369S2PbTadtO2fkWzZPwWuiYgTgD8HLpV0AnA9MBgR04HB4raZ9ammYY+ILRHxYnF9B7AGOBKYCywt7rYUOKtDPZpZBfbrNbukY4AZwK+ASRGxpSi9RW0338z61IjPjZf0BeCnwJUR8eHw11MREY3mcZM0AAy026iZtWdEW3ZJB1ML+v0RsaxYvFXSlKI+BdhWb2xELImImRExs4qGzaw1TcOu2ib8HmBNRNw5rPQosKC4vgB4pPr2zKwqI9mN/wvgfGCVpJeKZQuBxcBDki4CNgDndaRDO6C1MyV4N6cTz6Bp2CPif4BGBzxPq7YdM+sUn0FnloTDbpaEw26WhMNuloTDbpaEw26WhL9K2jqqnY+p+iOu1fKW3SwJh90sCYfdLAmH3SwJh90sCYfdLAmH3SwJh90sCYfdLAmH3SwJh90sCYfdLAmH3SwJh90sCYfdLAmH3SwJh90sCYfdLAmH3SwJh90sCYfdLAmH3SwJh90siabfGy/pKOA+YBIQwJKI+K6kRcDFwNvFXRdGxM861agdmHbt2tWwtm7dutKxkydPLq1v3LixpZ6yGskkEZ8C10TEi5LGAyslPVXUvhMR3+5ce2ZWlaZhj4gtwJbi+g5Ja4AjO92YmVVrv16zSzoGmAH8qlh0maSXJd0r6fAGYwYkrZC0or1WzawdIw67pC8APwWujIgPge8DxwInUdvy31FvXEQsiYiZETGz/XbNrFUjCrukg6kF/f6IWAYQEVsjYigiPgN+AJzSuTbNrF1Nw67aVJr3AGsi4s5hy6cMu9s8YHX17ZlZVRQR5XeQTgWeBVYBnxWLFwLzqe3CB7AeuKR4M6/sscpXZmZti4i6c103DXuVHHazzmsUdp9BZ5aEw26WhMNuloTDbpaEw26WhMNuloTDbpaEw26WhMNuloTDbpaEw26WhMNuloTDbpaEw26WxEi+XbZK7wAbht2eWCzrR/3aW7/2Be6tVVX2dnSjQlc/z77PyqUV/frddP3aW7/2Be6tVd3qzbvxZkk47GZJ9DrsS3q8/jL92lu/9gXurVVd6a2nr9nNrHt6vWU3sy5x2M2S6EnYJZ0h6TeS3pR0fS96aETSekmrJL3U6/npijn0tklaPWzZBElPSXqjuKw7x16PelskaXPx3L0kaU6PejtK0i8kvSrpFUn/UCzv6XNX0ldXnreuv2aXNAZ4HTgd2AS8AMyPiFe72kgDktYDMyOi5ydgSPpL4CPgvog4sVh2G7A9IhYXfygPj4h/6pPeFgEf9Xoa72K2oinDpxkHzgL+jh4+dyV9nUcXnrdebNlPAd6MiLURsQv4MTC3B330vYhYDmzfa/FcYGlxfSm1/yxd16C3vhARWyLixeL6DmD3NOM9fe5K+uqKXoT9SGDjsNub6K/53gN4UtJKSQO9bqaOScOm2XoLmNTLZupoOo13N+01zXjfPHetTH/eLr9Bt69TI+LPgNnApcXual+K2muwfjp2OqJpvLulzjTjn+vlc9fq9Oft6kXYNwNHDbv95WJZX4iIzcXlNuBh+m8q6q27Z9AtLrf1uJ/P9dM03vWmGacPnrteTn/ei7C/AEyXNFXSIcA3gEd70Mc+JI0r3jhB0jjg6/TfVNSPAguK6wuAR3rYyx76ZRrvRtOM0+PnrufTn0dE13+AOdTekf8t8M+96KFBX9OA/y1+Xul1b8CD1HbrPqH23sZFwJeAQeAN4GlgQh/19h/UpvZ+mVqwpvSot1Op7aK/DLxU/Mzp9XNX0ldXnjefLmuWhN+gM0vCYTdLwmE3S8JhN0vCYTdLwmE3S8JhN0vi/wEvvOBFgf8tgQAAAABJRU5ErkJggg==\n",
            "splitter_pos": [
                0,
                274
            ],
            "position": [
                31.609375000000114,
                -738.9375
            ],
            "width": 300,
            "height": 329,
            "metadata": {
                "title_metadata": {
                    "color": "white",
                    "font": "Ubuntu",
                    "size": 10,
                    "padding": 4.0
                }
            },
            "sockets": [
                {
                    "id": 2828158535432,
                    "type": "input",
                    "position": [
                        0.0,
                        42.0
                    ],
                    "metadata": {
                        "color": "#FF55FFF0",
                        "linecolor": "#FF000000",
                        "linewidth": 1.0,
                        "radius": 6.0
                    }
                }
            ]
        }
    ],
    "edges": [
        {
            "id": 1296325604832,
            "path_type": "bezier",
            "source": {
                "block": 2443479017656,
                "socket": 2443479018808
            },
            "destination": {
                "block": 2443477874008,
                "socket": 2443477875016
            }
        },
        {
            "id": 1491790170864,
            "path_type": "bezier",
            "source": {
                "block": 2443478982728,
                "socket": 2443478983880
            },
            "destination": {
                "block": 2443477874008,
                "socket": 2443477875016
            }
        },
        {
            "id": 2006783605056,
            "path_type": "bezier",
            "source": {
                "block": 2443478874872,
                "socket": 2443478910728
            },
            "destination": {
                "block": 2828158533848,
                "socket": 2828158535432
            }
        },
        {
            "id": 2006783606064,
            "path_type": "bezier",
            "source": {
                "block": 2443477874008,
                "socket": 2443477875160
            },
            "destination": {
                "block": 2443477924600,
                "socket": 2443477925608
            }
        },
        {
            "id": 2111730224144,
            "path_type": "bezier",
            "source": {
                "block": 2443477874008,
                "socket": 2443477875160
            },
            "destination": {
                "block": 2443477997032,
                "socket": 2443477997896
            }
        },
        {
            "id": 2111730844864,
            "path_type": "bezier",
            "source": {
                "block": 2443478874872,
                "socket": 2443478910728
            },
            "destination": {
                "block": 2443478982728,
                "socket": 2443478983592
            }
        }
    ]
}